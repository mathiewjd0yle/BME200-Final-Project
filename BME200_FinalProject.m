% BME 200 - Biomedical Engineering Computer Applications - Fall 21
% Final Project - Arduino
% Due 07 December 2021
% Mathiew Doyle A20458613
% Prof. Bonnie Haferkamp, PhD.
% Illinois Institute of Technology , Armour College of Engineering
% Dept. of Biomedical Engineering 

% The objective of this project is to use an Arduino uno kit (two analog
% sensors & two outputs) to collect sensor data, and to use MATLAB to
% analyze and interpret this data efficiently and thoroughly. 

% data calibration entailed plotting distance & light intensity
% (respectively) graphs vs. time, and data interpretation entailed
% calculating peak distance from ultrasound sensor & peak light intensity
% (respectively). Plotting sensor data combined these two sets of plots. 

keep_looping = true; % keep_looping ensures that our UI loops until the user prompts it to stop looping.

while(keep_looping == true)
    choice = menu('Biomedical Engineering Arduino Final Project', ...
        'Calibrate analog sensors', 'Analyze and interpret data', ...
        'Plot sensor data', 'Exit');
    
    if(choice == 1) % this code is executed if the user would like to calibrate the sensor data.
            sensorTypeChoice = menu('Please Choose Which Sensor to use', ...
                'Ultrasonic sensor (measures distance from nearest solid object)', ...
                'Photoresistor (measures intensity of light)');
            if(sensorTypeChoice == 1) % if user chooses ultrasonic sensor
                keep_looping2 = true;
                while(keep_looping2 == true)
                    calibrationOption = menu('Calibration of Sensor Data', ...
                        'Read in .txt files from Arduino', ... 
                        'Plot curve with best fit line', ...
                        'Display equation used for data calibration', 'Exit');
                    if(calibrationOption == 1) % if user wants to read in data 
                         ultraSonicDistances = dlmread('UltraSonicDistances.txt','\t'); % loads in distances
                         ultraSonicTimes = dlmread('UltraSonicTimes.txt','\t'); % loads in times
                         msgbox('calibration data loaded.');
                    elseif(calibrationOption == 2) % if user wants to plot curve with best fit line
                        figure
                        plot(ultraSonicDistances(:,1), ultraSonicTimes(:,1))
                        hold on 
                        % now, plot line of best fit generated by MATLAB
                        % plotting tools (see loaded image)
                        y = 0:0.01:2.85;
                        x = -.05716*y + 1.591;
                        plot(x, y) 
                        hold off
                        title('Ultrasonic Sensor Data - Calibration Plot')
                        ylabel('Time (hundredths of seconds)')
                        xlabel('Distance (cm)')
                        legend('time vs. distance', 'x = y = -.05716x + 1.591')
                    elseif(calibrationOption == 3) % if user wants to display the data used for calibration (the equation of best fit line)
                        msgbox('The linear equation needed to calibrate the sensor data for the ultrasonic sensor is x = -.05716*y + 1.591, where y7 is time(centiseconds) and x is the distance (cm)');
                        im1 = imread('plotToolsScreenshot.jpg');
                        imshow(im1);
                    elseif(calibrationOption == 4) % exit
                        keep_looping2 = false;
                    end %ifelse(calibrationOption)
                end %while(keep_looping2) 
            elseif(sensorTypeChoice == 2) % if user chooses photoresistor
                keep_looping3 = true;
                while(keep_looping3 == true)
                     calibrationOption2 = menu('Calibration of Sensor Data', ...
                    'Read in .txt file from Arduino', ...
                    'Plot curve with best fit line', ...
                    'Display equation used for data calibration', 'Exit');
                     if(calibrationOption2 == 1) % if user chooses to load in data
                         photoresistorTimes = dlmread('PhotoresistorTimes.txt', '\t');
                         photoresistorIntensity = dlmread('PhotoresistorIntensity.txt', '\t');
                         msgbox('calibration data loaded.');
                     elseif(calibrationOption2 == 2) % if user chooses to plot curve with best fit line
                        figure
                        plot(photoresistorIntensity(:,1), photoresistorTimes(:,1))
                        hold on 
                        % now, plot line of best fit generated by MATLAB (see loaded image)
                        y1 = 0:0.01:2.85;
                        x1 = -.0002235*y1 + 1.455;
                        plot(x1, y1) 
                        hold off
                        title('Photoresistor Data - Calibration Plot')
                        xlabel('Time (hundredths of seconds)')
                        ylabel('Light Intensity (lumen)')
                        legend('light intensity as a function of time', 'x = -.0002235y + 1.455;')
                     elseif(calibrationOption2 == 3) % if user chooses to display equation used for sensor calibration
                        msgbox('The linear equation needed to calibrate the sensor data for the photoresistor is y = x = -.0002235*y + 1.455;, where y is time(centiseconds) and x is light intensity(lumens)');
                        im2 = imread('photoResistorPlotToolsSS.jpg');
                        imshow(im2);
                     elseif(calibrationOption2 == 4) % exit
                         keep_looping3 = false;
                     end%ifelse(calibrationOption2)
                end%while(keep_looping3)
            end %ifelse(sensorTypeChoice)
        
    elseif (choice == 2) % this code is executed if the user would like to analyze and interpret the sensor data. 
            sensorTypeChoice = menu('Please Choose Which Sensor to use', ...
                'Ultrasonic sensor (measures distance from nearest solid object)', ...
                'Photoresistor (measures intensity of light)');
            if(sensorTypeChoice == 1) % user chose ultrasonic sensor
                keep_looping4 = true; 
                while(keep_looping4 == true)
                    peakChoice = menu('Ultrasonic Sensor Data Interpretation', 'Find peaks', ... 
                        'Plot peaks', 'Exit');
                    if(peakChoice == 1) % user chose to find peaks
                        [peaks, locs] = findpeaks(ultraSonicDistances(:,1));
                        x_peaks = y(locs);
                        msgbox(sprintf('peak(cm):  (%f, %f)' , x_peaks, peaks))
                    elseif(peakChoice == 2) % user chose to plot peaks
                        figure
                        plot(ultraSonicTimes(:,1), ultraSonicDistances(:,1))
                        hold on
                        plot(x_peaks, peaks, 'or')
                        title('Ultrasonic curve with Peaks & Best Fit line')
                        xlabel('Time(centisecond')
                        ylabel('distance(cm)')
                    elseif(peakChoice == 3) % exit
                        keep_looping4 = false;
                    end%ifelse(interpretationChoice)
                end%while(keep_looping4)
            elseif(sensorTypeChoice == 2) % user chose photoresistor
                keep_looping5 = true; 
                while(keep_looping5 == true)
                    peakChoice2 = menu('Photoresistor Sensor Data Interpretation', 'Find peaks', ...
                        'Plot peaks', 'Exit');
                    if(peakChoice2 == 1) % user chose to display peaks
                        x1 = 0:0.01:2.85;
                        [peaks1, locs1] = findpeaks(photoresistorIntensity(:,1));
                        x_peaks1 = x1(locs1);
                        msgbox(sprintf('peak(lumen) : (%f, %f)', x_peaks1, peaks1))
                    elseif(peakChoice2 == 2) % user chose to plot peaks 
                        figure
                        plot(photoresistorTimes(:,1), photoresistorIntensity(:,1))
                        hold on 
                        plot(x_peaks1, peaks1, 'or')
                        title('Photoresistor curve with peaks')
                        xlabel('Time(centisecond)')
                        ylabel('Light intensity(lumen)')
                    elseif(peakChoice2 == 3) % exit
                        keep_looping5 = false; 
                    end%elseif(peakChoice2)
                end%while(keep_looping5)
            end%ifelse(sensorTypeChoice) 
        
    elseif (choice == 3) % this code is executed if the user would like to plot a combination plot of the (output) vs. time, best fit, and peaks all in one graph for each sensor. 
        keep_looping6 = true; 
        while(keep_looping6 == true) 
            finalSensorChoice = menu('Finally, please choose a sensor for which a plot with the original curve, calibration equation line, and peaks will be plotted', ... 
                 'Ultrasonic sensor', 'Photoresistor', 'Exit');
            if(finalSensorChoice == 1) % user chooses ultrasonic sensor
                figure
                plot(ultraSonicTimes(:,1), ultraSonicDistances(:,1))
                hold on 
                y = 0:0.01:2.85;
                x = -.05716*y + 1.591;
                plot(x, y) 
                [peaks, locs] = findpeaks(ultraSonicDistances(:,1));
                x_peaks = y(locs);
                plot(x_peaks, peaks, 'or')
                title('Ultrasonic Sensor Curve, Best Fit Line, & Peaks')
                xlabel('Time (hundredths of seconds)')
                ylabel('Distance (cm)')
                legend('distance as a function of time', 'y = -0.09419*x + 2.956', 'peaks')
            elseif(finalSensorChoice == 2) % user chooses photoresistor
                figure
                plot(photoresistorTimes(:,1), photoresistorIntensity(:,1))
                hold on 
                y1 = 0:0.01:2.85;
                x1 = -.0002235*y + 1.455;
                plot(x1, y1) 
                [peaks1, locs1] = findpeaks(photoresistorIntensity(:,1));
                x_peaks1 = y1(locs1);
                plot(x_peaks1, peaks1, 'or')
                title('Photoresistor Curve, Best Fit Line, & Peaks')
                xlabel('Time (hundredths of seconds)')
                ylabel('Light Intensity (lumen)')
                legend('light intensity as a function of time', 'y = -7.358*x + 122.9', 'peaks')
            elseif(finalSensorChoice == 3) % exit
                keep_looping6 = false;
            end%ifelse(finalSensorChoice)
        end%while(keep_looping6)
    elseif (choice == 4) % this is simply for if the user would like to exit the user interface 
        keep_looping = false; 
    end %ifelse(choice)
end %while(keep_looping)